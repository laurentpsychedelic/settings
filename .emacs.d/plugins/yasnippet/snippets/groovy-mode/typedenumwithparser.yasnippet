# -*- mode: snippet -*-
# name: typedenumwithparser
# key: typedenumwithparser
# type: command
# --
(let ((yas-good-grace nil)
      (count (read-number "Number of elements: ")))
  (setq count2 (* 2 (1+ count)))
  (yas-expand-snippet
   (concat "public enum ${1:name} {\n"
           "\t"
           (mapconcat
            (lambda (num)
              (format "${%d:ele%d}(${%d:val%d})" (* 2 num) num (1+ (* 2 num)) num))
            (number-sequence 1 count nil)
            ", ")
           ";\n"
           (format "\tprivate $%d __${%d:$(downcase text)}Type;\n" count2 count2)
           (format "\tpublic $%d ${%d:$(downcase text)}Type() {\n" count2 count2)
           (format "\t\treturn __${%d:$(downcase text)}Type;\n" count2)
           "\t}\n"
           (format "\tpublic static $1 parse${%d:$(capitalize text)}($%d _${%d:$(downcase text)}Type) {\n\t\t" count2 count2 count2)
           (format "if ( _${%d:$(downcase text)}Type${%d: == }$%d${%d: }) {\n\t\treturn $%d;\n\t} else " count2 (+ 1 count2) (1+ (* 2 1)) (+ 2 count2) (* 2 1))
           (mapconcat
            (lambda (num)
              (format "if ( _${%d:$(downcase text)}Type$%d$%d$%d) {\n\t\treturn $%d;\n\t}" count2 (+ 1 count2) (1+ (* 2 num)) (+ 2 count2) (* 2 num)))
            (number-sequence 2 count nil)
            " else ")
           (format " else {\n\t\treturn $%d;\n\t}" (* 2 1))
           "\n\t}\n"
           (format "\t$1(${%d:type} _${%d:$(downcase text)}Type) {\n" count2 count2)
           (format "\t\t __${%d:$(downcase text)}Type = _${%d:$(downcase text)}Type;\n" count2 count2)
           "\t}\n"
           "}\n")))